DROP TABLE IF EXISTS likes, DM, story, following, comment, post, user;

CREATE TABLE user (
    UserId INT PRIMARY KEY AUTO_INCREMENT,
    Email NVARCHAR(255) UNIQUE NOT NULL,
    Bio NVARCHAR(500),
    Username NVARCHAR(50) UNIQUE NOT NULL,
    ProfilePic NVARCHAR(255),
    Password NVARCHAR(255) NOT NULL
);

CREATE TABLE post (
    PostId INT PRIMARY KEY AUTO_INCREMENT,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    Views INT DEFAULT 0,
    Likes INT DEFAULT 0,
    UserId INT,
    Caption NVARCHAR(500),
    Picture NVARCHAR(255),
    FOREIGN KEY (UserId) REFERENCES user(UserId) ON DELETE CASCADE
);

CREATE TABLE comment (
    CommentId INT PRIMARY KEY AUTO_INCREMENT,
    PostId INT,
    UserId INT,
    Comment NVARCHAR(500) NOT NULL,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostId) REFERENCES post(PostId) ON DELETE CASCADE,
    FOREIGN KEY (UserId) REFERENCES user(UserId) ON DELETE CASCADE
);

CREATE TABLE following (
    FollowingId INT PRIMARY KEY AUTO_INCREMENT,
    FollowerId INT,
    FolloweeId INT,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (FollowerId) REFERENCES user(UserId) ON DELETE CASCADE,
    FOREIGN KEY (FolloweeId) REFERENCES user(UserId) ON DELETE CASCADE,
    CONSTRAINT unique_follow UNIQUE (FollowerId, FolloweeId)
);

SET GLOBAL event_scheduler = ON;

CREATE TABLE story (
    StoryId INT PRIMARY KEY AUTO_INCREMENT,
    Views INT DEFAULT 0,
    UserId INT,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    ExpirationTime DATETIME GENERATED ALWAYS AS (Timestamp + INTERVAL 1 DAY) VIRTUAL,
    FOREIGN KEY (UserId) REFERENCES user(UserId) ON DELETE CASCADE
);

CREATE EVENT delete_expired_stories
ON SCHEDULE EVERY 1 MINUTE
DO
DELETE FROM story WHERE ExpirationTime <= NOW();


CREATE TABLE DM (
    DMId INT PRIMARY KEY AUTO_INCREMENT,
    SenderId INT,
    RecipientId INT,
    Message NVARCHAR(1000) NOT NULL,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (SenderId) REFERENCES user(UserId) ON DELETE CASCADE,
    FOREIGN KEY (RecipientId) REFERENCES user(UserId) ON DELETE CASCADE
);

CREATE TABLE likes (
    LikeId INT PRIMARY KEY AUTO_INCREMENT,
    UserId INT,
    PostId INT,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserId) REFERENCES user(UserId) ON DELETE CASCADE,
    FOREIGN KEY (PostId) REFERENCES post(PostId) ON DELETE CASCADE,
    CONSTRAINT unique_like UNIQUE (UserId, PostId)
);
